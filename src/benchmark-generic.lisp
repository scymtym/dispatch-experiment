(cl:in-package #:dispatch-experiment)

(defgeneric standard-gf (object)
  (:method ((object number))
    :number)
  (:method ((object double-float))
    :double-float)
  (:method ((object integer))
    :integer)
  (:method ((object symbol))
    :symbol)
  (:method ((object cons))
    :cons)
  (:method ((object list))
    :list)
  (:method ((object null))
    :null)
  (:method ((object class))
    :class)
  (:method ((object standard-object))
    :standard-object))

(defparameter *generic-classes*
  '(number double-float integer symbol cons list null class standard-object))

(defun prepare-generic-typep-vs-layout-address-vs-standard-gf ()
  (let+ ((layout-gf (make-instance 'layout-gf :classes *generic-classes*))
         (typep-gf  (make-instance 'typep-gf  :classes *generic-classes*))
         ((&flet call (gf object)
            (funcall gf object)
            (funcall gf object)))
         ((&flet calls (gf)
            (call gf 1)
            (call gf 1.0d0)
            (call gf 1.0f0)
            (call gf (1+ most-positive-fixnum))
            (call gf :foo)
            (call gf nil)
            (call gf (cons 1 2))
            (call gf (find-class 'class))
            (call gf #'standard-gf))))
    ;; Populate call history
    (calls layout-gf)
    (calls typep-gf)
    (calls #'standard-gf)

    (values layout-gf typep-gf)))

(defun run-generic-typep-vs-layout-address-vs-standard-gf (layout-gf typep-gf)
  (let+ (((&flet bench (gf object)
            (declare (type function gf))
            ;; Warm up
            (loop :repeat 100 :do (funcall gf object))
            ;; Time it
            (let ((*trace-output* *standard-output*))
              (time (locally (declare (optimize (speed 3) (debug 0) (safety 0)))
                      (loop :repeat 100000000 :do (funcall gf object))))))))
    ;; Benchmark runs
    (format t "object 1~%")
    (bench layout-gf     1)
    (bench typep-gf      1)
    (bench #'standard-gf 1)

    (format t "object nil~%")
    (bench layout-gf     nil)
    (bench typep-gf      nil)
    (bench #'standard-gf nil)

    (format t "object (1 . 2)~%")
    (bench layout-gf     '(1 . 2))
    (bench typep-gf      '(1 . 2))
    (bench #'standard-gf '(1 . 2))))
