(cl:in-package #:dispatch-experiment)

(progn
  (defclass a1 () ()) (defclass b1 () ()) (defclass c1 () ()) (defclass d1 () ())
  (defclass a2 () ()) (defclass b2 () ()) (defclass c2 () ()) (defclass d2 () ())
  (defclass a3 () ()) (defclass b3 () ()) (defclass c3 () ()) (defclass d3 () ()))

(defgeneric standard-gf2 (object)
  (:method ((object a1))
    :a1)
  (:method ((object b1))
    :b1)
  (:method ((object c1))
    :c1)
  (:method ((object d1))
    :d1)
  (:method ((object a2))
    :a2)
  (:method ((object b2))
    :b2)
  (:method ((object c2))
    :c2)
  (:method ((object d2))
    :d2)
  (:method ((object a3))
    :a3)
  (:method ((object b3))
    :b3)
  (:method ((object c3))
    :c3)
  (:method ((object d3))
    :d3))

(defgeneric standard-gf2/few (object)
  (:method ((object a1))
    :a1)
  (:method ((object b1))
    :b1)
  (:method ((object c1))
    :c1)
  (:method ((object d1))
    :d1))

(defparameter *standard-object-classes*
  '(a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3))

(defun prepare-standard-object-layout-address-vs-standard-gf (classes)
  (let+ ((layout-gf (make-instance 'layout-gf :classes classes))
         ;; (typep-gf  (make-instance 'typep-gf  :classes *standard-object-classes*))
         ((&flet calls (gf)
            (map nil (compose (curry #'funcall gf) #'make-instance)
                 classes))))
    (calls layout-gf)
    ;; (calls typep-gf)
    (calls #'standard-gf2)

    layout-gf))

(defun run-standard-object-layout-address-vs-standard-gf (layout-gf #+no typep-gf standard-gf object)
  (let+ (((&flet bench (gf object)
            (declare (type sb-mop:funcallable-standard-object gf))
            ;; Warm up
            (loop :repeat 100 :do (funcall gf object))
            ;; Time it
            (let ((*trace-output* *standard-output*))
              (time (locally (declare (optimize (speed 3) (debug 0) (safety 0)))
                      (loop :repeat 1000000000 :do (funcall gf object))))))))
    (format t "object ~%")
    (bench layout-gf   object)
    ;; (bench typep-gf    object)
    (bench standard-gf object)))
